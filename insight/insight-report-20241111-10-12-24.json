{"amount_correct": 13, "percentage_score": 76, "report_time": "2024-11-11 15:12:24", "checks": [{"description": "Ensure that the README.md file exists inside of the root of the GitHub repository", "check": "ConfirmFileExists", "status": true, "path": "../README.md"}, {"description": "Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md", "check": "MatchFileFragment", "options": {"fragment": "Add Your Name Here", "count": 0, "exact": true}, "status": true, "path": "../README.md"}, {"description": "Retype the every word in the Honor Code pledge in README.md", "check": "MatchFileFragment", "options": {"fragment": "I adhered to the Allegheny College Honor Code while completing this examination.", "count": 3, "exact": true}, "status": true, "path": "../README.md"}, {"description": "Indicate that you have completed all of the tasks in the README.md", "check": "MatchFileFragment", "options": {"fragment": "- [X]", "count": 10, "exact": true}, "status": true, "path": "../README.md"}, {"description": "Ensure that question_one.py file exists in the questions/ directory", "check": "ConfirmFileExists", "status": true, "path": "questions/question_one.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": true, "path": "questions/question_one.py"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 4, "exact": true}, "status": true, "path": "questions/question_one.py"}, {"description": "Ensure that test_question_one.py file exists in the tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "tests/test_question_one.py"}, {"description": "Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code", "command": "poetry run execexam . tests/ --mark \"question_one_part_a\" --no-fancy", "objectives": {"LO1": {"degree": [{"CS": "I", "rationale": "Manipulate the matrix data structure"}]}, "LO5": {"degree": [{"CS": "D", "rationale": "Search a matrix and compute summary values based on matrix"}]}}, "status": false, "diagnostic": ""}, {"description": "Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code", "command": "poetry run execexam . tests/ --mark \"question_one_part_b\" --no-fancy", "objectives": {"LO1": {"degree": [{"CS": "I", "rationale": "Manipulate the matrix data structure"}]}, "LO5": {"degree": [{"CS": "D", "rationale": "Search a matrix and compute summary values based on matrix"}]}}, "status": true}, {"description": "Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code", "command": "poetry run execexam . tests/ --mark \"question_one_part_c\" --no-fancy", "objectives": {"LO1": {"degree": [{"CS": "I", "rationale": "Manipulate the matrix data structure"}]}, "LO5": {"degree": [{"CS": "D", "rationale": "Search a matrix and compute summary values based on matrix"}]}}, "status": true}, {"description": "Ensure that Question 1 follows industry-standard rules using the command 'ruff check'", "command": "poetry run ruff check questions/question_one.py", "status": false, "diagnostic": "questions/question_one.py:53:5: F841 Local variable `minimum_value` is assigned to but never used\n        |\n     51 |     if not matrix or not matrix[0]:\n     52 |         return None\n     53 |     minimum_value = matrix[0][0]\n        |     ^^^^^^^^^^^^^ F841\n     54 |     for row in matrix:\n     55 |         for value in row:\n        |\n        = help: Remove assignment to unused variable `minimum_value`\n     \n     questions/question_one.py:56:17: F821 Undefined name `me`\n        |\n     54 |     for row in matrix:\n     55 |         for value in row:\n     56 |                 me\n        |                 ^^ F821\n     57 |     return w\n        |\n     \n     questions/question_one.py:57:12: F821 Undefined name `w`\n        |\n     55 |         for value in row:\n     56 |                 me\n     57 |     return w\n        |            ^ F821\n        |\n     \n     Found 3 errors.\n     No fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option)."}, {"description": "Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'", "command": "poetry run ruff format questions/question_one.py --check", "status": false, "diagnostic": "Would reformat: questions/question_one.py\n     1 file would be reformatted"}, {"description": "Ensure that Question 1 has correct type annotations using the command 'mypy'", "command": "poetry run mypy questions/question_one.py", "status": false, "diagnostic": "questions/question_one.py:56: error: Name \"me\" is not defined  [name-defined]\n     questions/question_one.py:57: error: Name \"w\" is not defined  [name-defined]\n     Found 2 errors in 1 file (checked 1 source file)"}, {"description": "Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'", "check": "MatchCommandFragment", "options": {"command": "poetry run symbex -s --fully-typed -f questions/question_one.py --count", "fragment": 3, "count": 1, "exact": true}, "status": true}, {"description": "Ensure that Question 1 has correct number of documented functions using the command 'symbex'", "check": "MatchCommandFragment", "options": {"command": "poetry run symbex -s --documented -f questions/question_one.py --count", "fragment": 3, "count": 1, "exact": true}, "status": true}, {"description": "Ensure that Question 1 has no undocumented functions using the command 'symbex'", "check": "MatchCommandFragment", "options": {"command": "poetry run symbex -s --undocumented -f questions/question_one.py --count", "fragment": 0, "count": 1, "exact": true}, "status": true}]}